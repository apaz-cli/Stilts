%preinclude  "../types.h"
%include     <daisho/Daisho.h>
%include     "../asthelpers.h"
%extra       void* extra;
%extra       void* symtab;
%extra       ExprType* type; // The concrete type
%extrainit   node->extra = NULL;
%extrainit   node->symtab = NULL;
%extrainit   node->type = NULL;


program      <- sh:SHEBANG? nses:{list(NSLIST)} (f:namespace {add(nses, f)})+ {rule=node(PROGRAM, sh, nses)}

namespace    <- ns:NAMESPACE name:TYPEIDENT SEMI l:{list(NSDECLS)}
                t:topdecl {add(l, t)} (SEMI t:topdecl {add(l, t)})*
                {rule=node(NAMESPACE, name, l)}

/****************/
/* DECLARATIONS */
/****************/

topdecl    <- fndecl / structdecl / uniondecl / traitdecl / impldecl


structdecl <- STRUCT id:TYPEIDENT tmpl:tmplexpand?
              impl:(IMPL type (COMMA type)*)?
              LCBRACK
              members:{ret=list(MEMBERLIST)}
             (m:typemember {add(members, m)})*
              RCBRACK
              n:{n = node(STRUCT, id, members);
              rule = has(tmpl) ? node(TMPLSTRUCT, tmpl, n) : n}

uniondecl  <- UNION id:TYPEIDENT tmpl:tmplexpand?
              impl:(IMPL type (COMMA type)*)?
              LCBRACK
              members:{ret=list(MEMBERLIST)}
             (m:typemember {add(members, m)})*
              RCBRACK
              n:{n = node(UNION, id, members);
              rule = has(tmpl) ? node(TMPLUNION, tmpl, n) : n}

traitdecl  <- TRAIT id:TYPEIDENT tmpl:tmplexpand?
              impl:(IMPL type (COMMA type)*)?
              LCBRACK
              members:{ret=list(MEMBERLIST)}
             (m:fnmember {add(members, m)})*
              RCBRACK
              n:{n = node(TRAIT, id, members);
              rule = has(tmpl) ? node(TMPLTRAIT, tmpl, n) : n}

fndecl     <- FN fnproto tmplexpand? expr

impldecl   <- IMPL tt:TYPEIDENT tmplexpand?
              FOR ft:type
              LCBRACK
              members:{ret=list(MEMBERLIST)}
             (m:fnmember {add(members, m)})*
              RCBRACK

typemember <- t:type v:VARIDENT SEMI {rule=node(TYPEMEMBER, t, v)}

fnmember   <- r:(fndecl / fnproto) SEMI {rule=r}


/*********/
/* TYPES */
/*********/

type<uint8_t depth = 0>
           <- v:VOIDTYPE     !STAR              {rule=node(TYPE, v)} // Void means nothing.
            / v:voidptr      (STAR {depth++})*  {rule=node(TYPE, v)} // Void* means anything.
            / s:SELFTYPE     (STAR {depth++})*  {rule=node(TYPE, s)} // Self refers to the type of the first arg, or the current type.
            / t:traittype    (STAR {depth++})*  {rule=node(TYPE, t)} // Trait object (+1 pointer, trait)
            / s:structtype   (STAR {depth++})*  {rule=node(TYPE, s)} // Type identifier
            / f:fntype       (STAR {depth++})*  {rule=node(TYPE, f)} // Fn<From -> To> is To(*fptr)(From).
            / c:ctypedecl                       {rule=node(TYPE, c)} // TODO figure out syntax

voidptr    <- v:VOIDPTR         {rule=v}
            / v:VOIDTYPE s:STAR {rule=leaf(VOIDPTR)}

traittype  <- i:TYPEIDENT t:tmplexpand?
              {ret = has(t) ? node(TMPLTYPE, t, i) : node(TYPE, i)}

structtype <- s:TYPEIDENT t:tmplexpand?
              {ret = has(t) ? node(TMPLTYPE, t, s) : node(TYPE, s)}

ctypedecl  <- CTYPE CIDENT

fntype     <- FNTYPE
              LT
              argtypes:{ret=list(ARGLIST)}
              (      t:type {add(argtypes, t)})?
              (COMMA t:type {add(argtypes, t)})* COMMA?
              {if (!argtypes->num_children) add(argtypes, leaf(VOIDTYPE))}
              (arrow:ARROW rettype:type)?
              GT
              {rule=node(FNTYPE, argtypes, !has(rettype) ? leaf(VOIDTYPE) : rettype)}
              /
              FNTYPE
              tmp:{rule=node(FNTYPE,
                            (tmp=list(ARGLIST), add(tmp, leaf(VOIDTYPE)), tmp),
                             leaf(VOIDTYPE))}


/***********************/
/* FUNCTIONS AND TYPES */
/***********************/

tmplspec   <-

tmplexpand <- LT tmplmember? (COMMA tmplmember)* COMMA? GT

tmplmember <- type

fnproto    <- type OPEN fnarg? (COMMA fnarg)* COMMA? CLOSE

fnarg      <- type (VARIDENT tmplexpand?)?

fnbody     <- expr


/****************************/
/* CONTROL FLOW EXPRESSIONS */
/****************************/

expr       <- next

forexpr    <- FOR OPEN? n:next ((COLON / IN) / (SEMI sn:next SEMI))  n:next CLOSE? n:next
            / n:next {rule=n}

whileexpr  <- WHILE o:OPEN? n:next c:CLOSE? {ret=o==c?SUCC:NULL} expr
            / n:next {rule=n}

ternexpr   <- n:next (q:QUEST qe:expr (c:COLON ce:expr)?)?
              {rule = !has(qe) ? n
                    : !has(ce) ? node(IF, q, n, qe)
                    :            node(TERN, q, c, n, qe, ce)}

thenexpr   <- n:next {rule=n} (THEN nn:next {rule=node(THEN, rule, nn)})*

alsoexpr   <- n:next {rule=n} (ALSO nn:next {rule=node(ALSO, rule, nn)})*


/********************/
/* BINARY OPERATORS */
/********************/

binop      <- next

eqexpr     <- n:next {rule=n}
             (op:(EQ / PLEQ / MINEQ / MULEQ / DIVEQ / MODEQ / ANDEQ / OREQ / XOREQ / BNEQ / BSREQ / BSLEQ)
              t:next
              // Requires information about what the next expression is
              {
                if      (op->kind == kind(EQ))    rule=node(EQ, rule,                   t );
                else if (op->kind == kind(PLEQ))  rule=node(EQ, rule, node(PLUS,  rule, t));
                else if (op->kind == kind(MINEQ)) rule=node(EQ, rule, node(MINUS, rule, t));
                else if (op->kind == kind(MULEQ)) rule=node(EQ, rule, node(MUL,   rule, t));
                else if (op->kind == kind(DIVEQ)) rule=node(EQ, rule, node(DIV,   rule, t));
                else if (op->kind == kind(MODEQ)) rule=node(EQ, rule, node(MOD,   rule, t));
                else if (op->kind == kind(ANDEQ)) rule=node(EQ, rule, node(AND,   rule, t));
                else if (op->kind == kind(OREQ))  rule=node(EQ, rule, node(OR,    rule, t));
                else if (op->kind == kind(XOREQ)) rule=node(EQ, rule, node(BNEQ,  rule, t));
                else if (op->kind == kind(BSREQ)) rule=node(EQ, rule, node(BSR,   rule, t));
                else if (op->kind == kind(BSLEQ)) rule=node(EQ, rule, node(BSL,   rule, t));
                else _DAI_UNREACHABLE()
              })*

logorexpr  <- n:next {rule=n} (LOGOR  n:next {rule=node(LOGOR,  rule, n)})*
logandexpr <- n:next {rule=n} (LOGAND n:next {rule=node(LOGAND, rule, n)})*
binorexpr  <- n:next {rule=n} (OR     n:next {rule=node(OR,     rule, n)})*
binxorexpr <- n:next {rule=n} (XOR    n:next {rule=node(XOR,    rule, n)})*
binandexpr <- n:next {rule=n} (AND    n:next {rule=node(AND,    rule, n)})*

deneqexpr  <- n:next {rule=n}
             (DEQ n:next {rule=node(DEQ, rule, n)}
             /NEQ n:next {rule=node(NEQ, rule, n)})*

cmpexpr    <- n:next {rule=n}
             (LT  n:next {rule=node(LT,  rule, n)}
             /GT  n:next {rule=node(GT,  rule, n)}
             /LEQ n:next {rule=node(LEQ, rule, n)}
             /GEQ n:next {rule=node(GEQ, rule, n)})*

shfexpr    <- n:next {rule=n} // Tokenized as < < and > >.
             (l:LT lt:LT n:next {rule=node(BSL, l, lt, rule, n)}
             /g:GT gt:GT n:next {rule=node(BSR, g, gt, rule, n)})*

sumexpr    <- n:next {rule=n}
             (p:PLUS  n:next {rule=repr(node(PLUS, rule, n), p)}
             /m:MINUS n:next {rule=repr(node(MINUS, rule, n), m)})*

multexpr   <- n:next {rule=n}
             (STAR n:next {rule=node(STAR, rule, n)}
             /DIV  n:next {rule=node(DIV,  rule, n)}
             /MOD  n:next {rule=node(MOD,  rule, n)})*

powexpr    <- n:next {rule=n} (POW {rule=node(POW, rule, n)})*

callexpr   <- VARIDENT t:tmplexpand? OPEN CLOSE
            / n:next {rule=n}

castexpr   <- n:next (OPEN t:type CLOSE)? {rule = has(t) ? node(CAST, t, n) : n}

refexpr    <- n:next r:REF?    {rule=has(r) ? node(REF, r, n) : n}

derefexpr  <- n:next d:DEREF?  {rule=has(d) ? node(REF, d, n) : n}

postretexpr <- n:next g:GRAVE? {rule=has(g) ? node(RET, g, n) : n}


/*********************************/
/* ATOMS AND SPECIAL EXPRESSIONS */
/*********************************/

atomexpr   <- blockexpr
            / lambdaexpr
            / listcomp
            / listlit
            / tuplelit
            / parenexpr
            / cfuncexpr
            / preretexpr
            / VARIDENT
            / numlit
            / strlit
            / sizeofexpr

blockexpr  <- LCBRACK
              {rule=list(BLK)}
              (e:expr {add(rule, e)})*
              RCBRACK

lambdaexpr <- (LSBRACK expr? (COMMA expr)* RSBRACK)? ((OPEN CLOSE) / (VARIDENT)) ARROW expr

listcomp   <- LSBRACK
              (cnt:VARIDENT COMMA)? expr   // Optional count
              FOR item:VARIDENT
              IN expr
              (WHERE expr)?
              RSBRACK

parenexpr  <- OPEN e:expr CLOSE {rule=e}

listlit    <- LSBRACK e:expr
            (COMMA? RSBRACK / (COMMA e:expr)* COMMA? RSBRACK)

tuplelit   <- OPEN e:expr
             (COMMA CLOSE / (COMMA e:expr)* COMMA? CLOSE)

//mapexpr    <- LCBRACK e:expr DARROW v:value
//             (COMMA RCBRACK / (COMMA e:expr DARROW v:value)* COMMA? RCBRACK)

cfuncexpr  <- CFN CIDENT

preretexpr <- r:RET e:expr {rule=node(RET, r, e)}

numlit     <- pm:(PLUS / MINUS)? nl:NUMLIT {rule = nl}

strlit     <- STRLIT // todo: adapt for fstrings

sizeofexpr <- SIZEOF OPEN (t:type / t:expr) CLOSE {rule=node(SIZEOF, t)}


/**************/
/* NODE KINDS */
/**************/

%node PROGRAM
%node SHEBANG
%node NSLIST
%node NAMESPACE
%node NSDECLS

%node MEMBERLIST
%node STRUCT
%node TMPLSTRUCT
%node UNION
%node TMPLUNION
%node TRAIT
%node TMPLTRAIT
%node TYPE
%node TMPLTYPE
%node TRAITTYPE
%node STRUCTTYPE
%node VOIDPTR

%node QUEST
%node COLON

%node FOR
%node WHILE

%node CAST
%node REF
%node DEREF
%node BLK
%node ARGLIST
%node ARROW
%node DARROW
%node LAMBDA
%node SIZEOF

%node EQ
%node PLEQ
%node MINEQ
%node MULEQ
%node DIVEQ
%node MODEQ
%node ANDEQ
%node OREQ
%node XOREQ
%node BNEQ
%node BSREQ
%node BSLEQ

%node TERN
%node IF
%node THEN
%node ALSO

%node LOGOR
%node LOGAND
%node OR
%node XOR
%node AND

%node DEQ
%node NEQ

%node LT
%node GT
%node LEQ
%node GEQ

%node BSL
%node BSR

%node STAR
%node MUL
%node DIV
%node MOD
%node POW

%node SUM
%node PLUS
%node MINUS

%node RET
%node GRAVE

%node SELF
%node SELFTYPE
%node VOIDTYPE
%node FNTYPE

%node OPEN
%node CLOSE
%node NUMLIT
%node STRLIT
%node TYPEMEMBER
%node TYPEIDENT
%node DTRAITIDENT
%node VARIDENT
