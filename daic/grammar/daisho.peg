%node PROG
%node SHEBANG
program    <- sh:SHEBANG?

/**************************/
/* TOP LEVEL DECLARATIONS */
/**************************/

ctype      <- CTYPE CIDENT STAR*

cfunc      <- CFUNC CIDENT


classdecl  <- CLASS id:TYPEIDENT
              impl:(IMPL type (COMMA type)*)?
              LCBRACK
              RCBRACK

traitdecl  <- TRAIT id:TYPEIDENT
              impl:(IMPL type (COMMA type)*)?
              LCBRACK
              RCBRACK

impldecl   <- IMPL tt:TYPEIDENT FOR ft:TYPEIDENT
              LCBRACK
              RCBRACK

tmpldecl   <-

fndecl     <-

fnproto    <-

fnarglist  <-

type       <- VOIDTYPE !STAR        // Void type (Void* means anything, Void means nothing.)
            / traittype STAR*       // Trait object (+1 pointer, trait)
            / classtype STAR*       // Type identifier
            / VOIDTYPE

traittype  <- TYPEIDENT GRAVE*

classtype  <- TYPEIDENT


/****************************/
/* CONTROL FLOW EXPRESSIONS */
/****************************/



/***************/
/* EXPRESSIONS */
/***************/

expr <- next


/********************/
/* BINARY OPERATORS */
/********************/

%node LOGOR
%node LOGAND
%node OR
%node XOR
%node AND
logorexpr  <- n:next {rule=n} (op:LOGOR  n:next {rule=node(LOGOR,  op, rule, n)})*
logandexpr <- n:next {rule=n} (op:LOGAND n:next {rule=node(LOGAND, op, rule, n)})*
binorexpr  <- n:next {rule=n} (op:OR     n:next {rule=node(OR,     op, rule, n)})*
binxorexpr <- n:next {rule=n} (op:XOR    n:next {rule=node(XOR,    op, rule, n)})*
binandexpr <- n:next {rule=n} (op:AND    n:next {rule=node(AND,    op, rule, n)})*


%node DEQ
%node NEQ
%node BEQ
eneqexpr   <- n:next {rule=n}
             (op:(DEQ / NEQ)
              n:next {rule=node(BEQ, op, rule, n)})*


%node LT
%node GT
%node LEQ
%node GEQ
%node CMP
cmpexpr    <- n:next {rule=n}
             (op:(LT / GT / LEQ / GEQ)
              n:next {rule=node(CMP, op, rule, n)})*

%node SHIFT
shfexpr    <- n:next {rule=n}
             (op:(lshf / rshf) // Tokenized as << and >>. See the rule.
              n:next {rule=node(SHIFT, op, rule, n)})*


%node FACTOR
%node STAR
%node DIV
%node MOD
multexpr   <- n:next {rule=n}
             (op:(STAR / DIV / MOD)
              n:next {rule=node(FACTOR, op, rule, n)})*


%node SUM
%node PLUS
%node MINUS
sumexpr    <- n:next {rule=n}
             (op:(PLUS / MINUS)
              n:next {rule=node(SUM, op, rule, n)})*

/* (Cast) (Call) */
%node CAST
castexpr   <- o:OPEN t:type CLOSE e:expr { rule = node(CAST, o, t, e); }
            / re:refexpr { rule = re; }

/* @ $ */
%node REF
%node DEREF
refexpr    <- d:derefexpr a:REF? { rule = a != SUCC ? node(REF, a, d) : d }
derefexpr  <-


/*********/
/* ATOMS */
/*********/

atomexpr   <- VARIDENT
            / NUMLIT
            / STRLIT
            / blockexpr
            / castexpr
            / lambdaexpr
            / listcomp
            / parenexpr


%node BLK
blockexpr  <- LCBRACK
              {rule=list(BLK)}
              (e:expr {add(rule, e)})*
              RCBRACK


%node LAMBDA
lambdaexpr <-
listcomp   <-

parenexpr  <-

/**********************/
/* MISC GRAMMAR STUFF */
/**********************/

%node LSHF
%node RSHF
lshf    <- l:LT lt:LT {rule=node(LSHF, l, lt)}
rshf    <- g:GT gt:GT {rule=node(RSHF, g, gt)}


/* TOKEN NODE KINDS */

%node VOIDTYPE
%node OPEN
%node CLOSE
%node VIDENT
%node NUMLIT
%node STRLIT
%node TYPEIDENT
%node VARIDENT
