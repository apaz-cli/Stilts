#!/usr/bin/python3

# Run this script from the "tests/" directory.

import re
import os
import sys
import shutil
import sysconfig
import subprocess
from subprocess import PIPE
from subprocess import run as subrun
from shlex import split
from os import chdir as cd
from glob import glob

#############
# Scripting #
#############


def printpurple(s, end=os.linesep):
    print("\x1b[35m" + s + "\x1b[0m", end=end)


def run_np(s):
    subrun(split(s), check=True)


def run(s, end=os.linesep):
    printpurple("\x1b[35m" + s + "\x1b[0m", end=end)
    run_np(s)


def mkdir(s):
    try:
        os.mkdir(s)
    except OSError:
        pass


def rm(s):
    try:  # File
        os.remove(s)
    except:  # Directory
        shutil.rmtree(s)


def heading(s):
    print("\x1b[31m" + s + "\x1b[0m")


os.system("")  # Enables escape sequences on windows lmao


############
# Makefile #
############

cc = "cc"

pycconfig = subprocess.run(["python3-config", "--cflags", "--embed"], stdout=subprocess.PIPE).stdout.decode('utf-8')
pycconfig = re.sub("\n", " ", pycconfig)
pycconfig = re.sub(" +", " ", pycconfig)

pyldconfig = subprocess.run(["python3-config", "--ldflags", "--embed"], stdout=subprocess.PIPE).stdout.decode('utf-8')
pyldconfig = re.sub("\n", " ", pyldconfig)
pyldconfig = re.sub(" +", " ", pyldconfig)

warnings = "-Wall -Wextra -Wpedantic -Wstrict-prototypes -Wno-missing-braces -Wno-unused-function"

extras = "-O0 -D_DAI_EMBED_PYTHON=1 -g -rdynamic"

invocations = []

def compile(script, exename):
    command = f'{cc} {pycconfig} {warnings} {extras} {script} {pyldconfig} -o {exename}'
    run(command)
    invocations.append([os.getcwd(), command, exename])


def writelint():
    with open("../compile_commands.json", 'w') as f:
        f.write('[')
        for n, i in enumerate(invocations):
            f.write('{')
            f.write(f'"directory": "{i[0]}",')
            f.write(f'"command": "{i[1]}",')
            f.write(F'"file": "{i[2]}"')
            f.write('}')
            if n != (len(invocations)-1):
                f.write(',')
        f.write(']')


scripts = []


def buildTests():
    heading("Building daic.")
    cd('..')
    run('./rungenerators.sh')
    run('./install.sh')
    cd('tests/')
    print()

    heading("Building C test scripts.")
    mkdir('bin/')
    for script in glob('scripts/*.c'):
        exename = f"bin/{script[len('scripts/'):len(script)-2]}"
        scripts.append((script, exename))
        compile(script, exename)
    print()

    heading("Copying Python test scripts.")
    for script in glob('scripts/*.py'):
        exename = f"bin/{script[len('scripts/'):len(script)-3]}"
        scripts.append((script, exename))

        run(f'cp {script} {exename}', end="")
        print("\x1b[35m && \x1b[0m", end="")
        run(f'chmod +x {exename}')
    print()


def runTests():
    # Run the test scripts.
    heading("Running test scripts")
    try:
        for p in scripts:
            printpurple(p[0])
            run_np(p[1])
            print()
    except:
        print("FAIL")
        exit(1)


def cleanTests():
    rm('bin/')
    pass


if (len(sys.argv) > 1):
    taken = False
    if 'lint' in sys.argv:
        writelint()
        taken = True
    if 'run' in sys.argv:
        buildTests()
        runTests()
        taken = True
    if 'clean' in sys.argv:
        cleanTests()
        taken = True
    if taken:
        exit(0)


buildTests()
runTests()
cleanTests()
writelint()
