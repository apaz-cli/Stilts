
ctype Bool bool;

trait Boolable {
  Bool();
};

class Optional<T> {
    T t;
    Bool present;
};
impl Boolable for Optional<T> {
    Bool to_bool() self.present;
};

trait Iterable<T> impl Boolable {
    Optional<T> next();
};

trait Integer impl Boolable {
    Self  +(Self other);
    Self  -(Self other);
    Self  *(Self other);
    Self  /(Self other);
    Self  %(Self other);
    Self  <(Self other);
    Self  >(Self other);
    Self  ~(Self other);
    Self  and(Self other);
    Self  or(Self other);
    Self  xor(Self other);
    Self ++() self` also self$ = self$ + 1;
    Self --() self` also self$ = self$ - 1;
};

template<T>
trait Floating {
    
};