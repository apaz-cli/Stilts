#include "Builtins"

trait Mapper<T, K> { K ()(T input); }
trait Consumer<T> { Void ()(T input); }
trait Stream<T> {
    T?        next();
    List<T>   toList();
    Array<T>  toArray();
    Stream<K> map(Mapper<T, K> mapper);
    Stream<K> flatMap(Mapper<T, Stream<K>> mapper);
    Void      forEach(Consumer<T> action);
}


trait Collection<T> {
    Void contains(T elem);
    List<T> toList();
    Array<T> toArray();
    Stream<T> stream() self.toList().stream();
    Stream<T> parallelStream() self.toList().parallelStream();
    Stream<K> map(Mapper<T, K> mapper) self.stream().map(mapper);
    Stream<K> flatMap(Mapper<T, Stream<K>> mapper) self.stream().flatMap(mapper);
    Void forEach(Consumer<T> consumer) self.stream().forEach(consumer);
}

trait List<T> impl Collection<T> {
    Void contains() {}
    // TODO
}

class Array<T> impl List<T> {
    T* buf;
    Size_t size;
    Size_t cap;

    T =[](Size_t idx) buf[idx];
    Void []=(Size_t idx, T other) { buf[idx] = other; }

    Array<T> new() {
        self.buf = NULL
        self.size = self.cap = 0
    }

    Void add() {
        next_len = self.len + 1;
        self.cap <= next_len ? {
            next_cap = next_len * 2 + 8
            reall = realloc(self.buf, sizeof(type) * next_cap)(T*)
            if (!reall) return
            self.cap = next_cap
            self.buf = reall
        }
        self.buf[self.len] = item
        self.len = next_len
    }

    T remove(Size_t idx) {
        r = self.buf[idx]
        nl = self.len ? self.len - 1 : 0
        for (i = idx; i < nl; i++)
            self.buf[i] = self.buf[i+1]
        self.len = nlen
        return r
    }
}

class List<T> {
    
}

class Tuple<K,V> {
    K first;
    V second;
}

class Map<K, V> {
    
}

class Set<T> {
    Map<T, T> m;
}

class Queue<T> {
    List<T> l;
}


