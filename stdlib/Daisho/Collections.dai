#include "Builtins"

trait Mapper<T, K> { abstract K apply(T input); }
trait Consumer<T> { abstract Void apply(T input); }
trait Stream<T> {
    Stream<K> map(Mapper<T, K> mapper);
    Stream<K> flatMap(Mapper<T, Stream<K>> mapper);
    Void      forEach(Consumer<T> action);
    Array<T>  toArray();
    List<T>   toList();

    default List<T> collect() { return this.toList(); }
}


trait Collection<T> {
    abstract Void contains(T elem);

    abstract List<T> toList();
    abstract Array<T> toArray();

    default Stream<T> stream() { this.toList().stream(); }
    default Stream<T> parallelStream( this.toList().parallelStream(); );

    default Stream<K> map(Mapper<T, K> mapper) {
        return this.stream().map(mapper);
    }
    default Stream<K> flatMap(Mapper<T, Stream<K>> mapper) {
        return this.stream().flatMap(mapper);
    }
    default Void forEach(Consumer<T> consumer) {
        return this.stream().forEach(consumer);
    }
}

class Array<T> implements Collection<T> {
    public T* items;
    Int size;

    Array<T> operator new(Size_t size) {
        this.size = size;
        this.items = (T*)malloc(sizeof(T) * size);
    }
    Void operator del() {
        free(this.items);
    }

    T operator[](Size_t idx) { return items[idx]; }
    Void operator[]=(Size_t idx, T other) { items[idx] = other; }
}

class List<T> {
    
}

class Tuple<K,V> {
    K first;
    V second;
}

class Map<K, V> {
    
}

class Set<T> {
    Map<T, T> m;
}

class Queue<T> {
    List<T> l;
}


