// THIS FILE GENERATED BY GenTokType.py. DO NOT EDIT.
#ifndef INCLUDE_AUTOMATA
#define INCLUDE_AUTOMATA

/*
 * This file (Generated by GenTokTypes.py, edits will be overwritten) contains 
 * a set of rules for Daisho's NFA-based tokenizer.
 *
 * Every type of Daisho token is represented by a single deterministic finite 
 * automaton. Each automaton reads one character of the imput at a time. If 
 * the character matches a transition rule (start_range and end_range are both 
 * inclusive) and the DFA is currently in the matching start_state, then it 
 * will change state to the corresponding end_state. 
 *
 * There may be multiple transition rules that match. Ties are broken by 
 * taking the first applicable transition. If no transition rule applies, the 
 * DFA transitions into the 0 state, which is non-accepting, and no further 
 * input will be processed.
 *
 * Tokenization continues until one of the following:
 *   One or less of the DFAs are accepting
 *   The end of the file is reached.
 * At this point, we rewind to the last position where a DFA was accepting, 
 * and break any ties. We take that token, add it to the token stream, advance 
 * our position in the file, and continue for the next token. If there's no 
 * token to add because we're at the end of the file, or some type of syntax 
 * error occurred where there is no valid token to add, we stop processing and 
 * either end the token stream with the END_OF_FILE token, or throw an error.
 */


typedef uint8_t NFAState;
#define NFASTATE_MAX UINT8_MAX

TYPE_DECLARE(DFARule);
struct DFARule {
  // Start and end are inclusive
  utf8_t start_range; utf8_t end_range;
  NFAState start_state;
  NFAState end_state;
};

TYPE_DECLARE(DFA);
struct DFA {
  DFARule* rules;
  size_t num_rules;
  NFAState accepting_state;
};

/*****************************/
/* Exact Tokenizer DFA Rules */
/*****************************/
#define NATIVE_ACCEPTING 7
static DFARule NATIVE_rule_1 = { .start_range = 'n', .end_range = 'n', .start_state = 1, .end_state = 2 };
static DFARule NATIVE_rule_2 = { .start_range = 'a', .end_range = 'a', .start_state = 2, .end_state = 3 };
static DFARule NATIVE_rule_3 = { .start_range = 't', .end_range = 't', .start_state = 3, .end_state = 4 };
static DFARule NATIVE_rule_4 = { .start_range = 'i', .end_range = 'i', .start_state = 4, .end_state = 5 };
static DFARule NATIVE_rule_5 = { .start_range = 'v', .end_range = 'v', .start_state = 5, .end_state = 6 };
static DFARule NATIVE_rule_6 = { .start_range = 'e', .end_range = 'e', .start_state = 6, .end_state = 7 };

#define CTYPE_ACCEPTING 6
static DFARule CTYPE_rule_1 = { .start_range = 'c', .end_range = 'c', .start_state = 1, .end_state = 2 };
static DFARule CTYPE_rule_2 = { .start_range = 't', .end_range = 't', .start_state = 2, .end_state = 3 };
static DFARule CTYPE_rule_3 = { .start_range = 'y', .end_range = 'y', .start_state = 3, .end_state = 4 };
static DFARule CTYPE_rule_4 = { .start_range = 'p', .end_range = 'p', .start_state = 4, .end_state = 5 };
static DFARule CTYPE_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };

#define IF_ACCEPTING 3
static DFARule IF_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
static DFARule IF_rule_2 = { .start_range = 'f', .end_range = 'f', .start_state = 2, .end_state = 3 };

#define ELSE_ACCEPTING 5
static DFARule ELSE_rule_1 = { .start_range = 'e', .end_range = 'e', .start_state = 1, .end_state = 2 };
static DFARule ELSE_rule_2 = { .start_range = 'l', .end_range = 'l', .start_state = 2, .end_state = 3 };
static DFARule ELSE_rule_3 = { .start_range = 's', .end_range = 's', .start_state = 3, .end_state = 4 };
static DFARule ELSE_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };

#define FOR_ACCEPTING 4
static DFARule FOR_rule_1 = { .start_range = 'f', .end_range = 'f', .start_state = 1, .end_state = 2 };
static DFARule FOR_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
static DFARule FOR_rule_3 = { .start_range = 'r', .end_range = 'r', .start_state = 3, .end_state = 4 };

#define LOOP_ACCEPTING 5
static DFARule LOOP_rule_1 = { .start_range = 'l', .end_range = 'l', .start_state = 1, .end_state = 2 };
static DFARule LOOP_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
static DFARule LOOP_rule_3 = { .start_range = 'o', .end_range = 'o', .start_state = 3, .end_state = 4 };
static DFARule LOOP_rule_4 = { .start_range = 'p', .end_range = 'p', .start_state = 4, .end_state = 5 };

#define WHILE_ACCEPTING 6
static DFARule WHILE_rule_1 = { .start_range = 'w', .end_range = 'w', .start_state = 1, .end_state = 2 };
static DFARule WHILE_rule_2 = { .start_range = 'h', .end_range = 'h', .start_state = 2, .end_state = 3 };
static DFARule WHILE_rule_3 = { .start_range = 'i', .end_range = 'i', .start_state = 3, .end_state = 4 };
static DFARule WHILE_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };
static DFARule WHILE_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };

#define CONTINUE_ACCEPTING 9
static DFARule CONTINUE_rule_1 = { .start_range = 'c', .end_range = 'c', .start_state = 1, .end_state = 2 };
static DFARule CONTINUE_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
static DFARule CONTINUE_rule_3 = { .start_range = 'n', .end_range = 'n', .start_state = 3, .end_state = 4 };
static DFARule CONTINUE_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
static DFARule CONTINUE_rule_5 = { .start_range = 'i', .end_range = 'i', .start_state = 5, .end_state = 6 };
static DFARule CONTINUE_rule_6 = { .start_range = 'n', .end_range = 'n', .start_state = 6, .end_state = 7 };
static DFARule CONTINUE_rule_7 = { .start_range = 'u', .end_range = 'u', .start_state = 7, .end_state = 8 };
static DFARule CONTINUE_rule_8 = { .start_range = 'e', .end_range = 'e', .start_state = 8, .end_state = 9 };

#define BREAK_ACCEPTING 6
static DFARule BREAK_rule_1 = { .start_range = 'b', .end_range = 'b', .start_state = 1, .end_state = 2 };
static DFARule BREAK_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
static DFARule BREAK_rule_3 = { .start_range = 'e', .end_range = 'e', .start_state = 3, .end_state = 4 };
static DFARule BREAK_rule_4 = { .start_range = 'a', .end_range = 'a', .start_state = 4, .end_state = 5 };
static DFARule BREAK_rule_5 = { .start_range = 'k', .end_range = 'k', .start_state = 5, .end_state = 6 };

#define IN_ACCEPTING 3
static DFARule IN_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
static DFARule IN_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };

#define CLASS_ACCEPTING 6
static DFARule CLASS_rule_1 = { .start_range = 'c', .end_range = 'c', .start_state = 1, .end_state = 2 };
static DFARule CLASS_rule_2 = { .start_range = 'l', .end_range = 'l', .start_state = 2, .end_state = 3 };
static DFARule CLASS_rule_3 = { .start_range = 'a', .end_range = 'a', .start_state = 3, .end_state = 4 };
static DFARule CLASS_rule_4 = { .start_range = 's', .end_range = 's', .start_state = 4, .end_state = 5 };
static DFARule CLASS_rule_5 = { .start_range = 's', .end_range = 's', .start_state = 5, .end_state = 6 };

#define SELF_ACCEPTING 5
static DFARule SELF_rule_1 = { .start_range = 's', .end_range = 's', .start_state = 1, .end_state = 2 };
static DFARule SELF_rule_2 = { .start_range = 'e', .end_range = 'e', .start_state = 2, .end_state = 3 };
static DFARule SELF_rule_3 = { .start_range = 'l', .end_range = 'l', .start_state = 3, .end_state = 4 };
static DFARule SELF_rule_4 = { .start_range = 'f', .end_range = 'f', .start_state = 4, .end_state = 5 };

#define OP_ACCEPTING 3
static DFARule OP_rule_1 = { .start_range = 'o', .end_range = 'o', .start_state = 1, .end_state = 2 };
static DFARule OP_rule_2 = { .start_range = 'p', .end_range = 'p', .start_state = 2, .end_state = 3 };

#define OPERATOR_ACCEPTING 9
static DFARule OPERATOR_rule_1 = { .start_range = 'o', .end_range = 'o', .start_state = 1, .end_state = 2 };
static DFARule OPERATOR_rule_2 = { .start_range = 'p', .end_range = 'p', .start_state = 2, .end_state = 3 };
static DFARule OPERATOR_rule_3 = { .start_range = 'e', .end_range = 'e', .start_state = 3, .end_state = 4 };
static DFARule OPERATOR_rule_4 = { .start_range = 'r', .end_range = 'r', .start_state = 4, .end_state = 5 };
static DFARule OPERATOR_rule_5 = { .start_range = 'a', .end_range = 'a', .start_state = 5, .end_state = 6 };
static DFARule OPERATOR_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };
static DFARule OPERATOR_rule_7 = { .start_range = 'o', .end_range = 'o', .start_state = 7, .end_state = 8 };
static DFARule OPERATOR_rule_8 = { .start_range = 'r', .end_range = 'r', .start_state = 8, .end_state = 9 };

#define TRAIT_ACCEPTING 6
static DFARule TRAIT_rule_1 = { .start_range = 't', .end_range = 't', .start_state = 1, .end_state = 2 };
static DFARule TRAIT_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
static DFARule TRAIT_rule_3 = { .start_range = 'a', .end_range = 'a', .start_state = 3, .end_state = 4 };
static DFARule TRAIT_rule_4 = { .start_range = 'i', .end_range = 'i', .start_state = 4, .end_state = 5 };
static DFARule TRAIT_rule_5 = { .start_range = 't', .end_range = 't', .start_state = 5, .end_state = 6 };

#define IMPL_ACCEPTING 5
static DFARule IMPL_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
static DFARule IMPL_rule_2 = { .start_range = 'm', .end_range = 'm', .start_state = 2, .end_state = 3 };
static DFARule IMPL_rule_3 = { .start_range = 'p', .end_range = 'p', .start_state = 3, .end_state = 4 };
static DFARule IMPL_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };

#define ENUM_ACCEPTING 5
static DFARule ENUM_rule_1 = { .start_range = 'e', .end_range = 'e', .start_state = 1, .end_state = 2 };
static DFARule ENUM_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };
static DFARule ENUM_rule_3 = { .start_range = 'u', .end_range = 'u', .start_state = 3, .end_state = 4 };
static DFARule ENUM_rule_4 = { .start_range = 'm', .end_range = 'm', .start_state = 4, .end_state = 5 };

#define PRIVATE_ACCEPTING 8
static DFARule PRIVATE_rule_1 = { .start_range = 'p', .end_range = 'p', .start_state = 1, .end_state = 2 };
static DFARule PRIVATE_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
static DFARule PRIVATE_rule_3 = { .start_range = 'i', .end_range = 'i', .start_state = 3, .end_state = 4 };
static DFARule PRIVATE_rule_4 = { .start_range = 'v', .end_range = 'v', .start_state = 4, .end_state = 5 };
static DFARule PRIVATE_rule_5 = { .start_range = 'a', .end_range = 'a', .start_state = 5, .end_state = 6 };
static DFARule PRIVATE_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };
static DFARule PRIVATE_rule_7 = { .start_range = 'e', .end_range = 'e', .start_state = 7, .end_state = 8 };

#define PROTECTED_ACCEPTING 10
static DFARule PROTECTED_rule_1 = { .start_range = 'p', .end_range = 'p', .start_state = 1, .end_state = 2 };
static DFARule PROTECTED_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
static DFARule PROTECTED_rule_3 = { .start_range = 'o', .end_range = 'o', .start_state = 3, .end_state = 4 };
static DFARule PROTECTED_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
static DFARule PROTECTED_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };
static DFARule PROTECTED_rule_6 = { .start_range = 'c', .end_range = 'c', .start_state = 6, .end_state = 7 };
static DFARule PROTECTED_rule_7 = { .start_range = 't', .end_range = 't', .start_state = 7, .end_state = 8 };
static DFARule PROTECTED_rule_8 = { .start_range = 'e', .end_range = 'e', .start_state = 8, .end_state = 9 };
static DFARule PROTECTED_rule_9 = { .start_range = 'd', .end_range = 'd', .start_state = 9, .end_state = 10 };

#define PUBLIC_ACCEPTING 7
static DFARule PUBLIC_rule_1 = { .start_range = 'p', .end_range = 'p', .start_state = 1, .end_state = 2 };
static DFARule PUBLIC_rule_2 = { .start_range = 'u', .end_range = 'u', .start_state = 2, .end_state = 3 };
static DFARule PUBLIC_rule_3 = { .start_range = 'b', .end_range = 'b', .start_state = 3, .end_state = 4 };
static DFARule PUBLIC_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };
static DFARule PUBLIC_rule_5 = { .start_range = 'i', .end_range = 'i', .start_state = 5, .end_state = 6 };
static DFARule PUBLIC_rule_6 = { .start_range = 'c', .end_range = 'c', .start_state = 6, .end_state = 7 };

#define INSTANCEOF_ACCEPTING 11
static DFARule INSTANCEOF_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
static DFARule INSTANCEOF_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };
static DFARule INSTANCEOF_rule_3 = { .start_range = 's', .end_range = 's', .start_state = 3, .end_state = 4 };
static DFARule INSTANCEOF_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
static DFARule INSTANCEOF_rule_5 = { .start_range = 'a', .end_range = 'a', .start_state = 5, .end_state = 6 };
static DFARule INSTANCEOF_rule_6 = { .start_range = 'n', .end_range = 'n', .start_state = 6, .end_state = 7 };
static DFARule INSTANCEOF_rule_7 = { .start_range = 'c', .end_range = 'c', .start_state = 7, .end_state = 8 };
static DFARule INSTANCEOF_rule_8 = { .start_range = 'e', .end_range = 'e', .start_state = 8, .end_state = 9 };
static DFARule INSTANCEOF_rule_9 = { .start_range = 'o', .end_range = 'o', .start_state = 9, .end_state = 10 };
static DFARule INSTANCEOF_rule_10 = { .start_range = 'f', .end_range = 'f', .start_state = 10, .end_state = 11 };

#define SIZEOF_ACCEPTING 7
static DFARule SIZEOF_rule_1 = { .start_range = 's', .end_range = 's', .start_state = 1, .end_state = 2 };
static DFARule SIZEOF_rule_2 = { .start_range = 'i', .end_range = 'i', .start_state = 2, .end_state = 3 };
static DFARule SIZEOF_rule_3 = { .start_range = 'z', .end_range = 'z', .start_state = 3, .end_state = 4 };
static DFARule SIZEOF_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };
static DFARule SIZEOF_rule_5 = { .start_range = 'o', .end_range = 'o', .start_state = 5, .end_state = 6 };
static DFARule SIZEOF_rule_6 = { .start_range = 'f', .end_range = 'f', .start_state = 6, .end_state = 7 };

#define ASSERT_ACCEPTING 7
static DFARule ASSERT_rule_1 = { .start_range = 'a', .end_range = 'a', .start_state = 1, .end_state = 2 };
static DFARule ASSERT_rule_2 = { .start_range = 's', .end_range = 's', .start_state = 2, .end_state = 3 };
static DFARule ASSERT_rule_3 = { .start_range = 's', .end_range = 's', .start_state = 3, .end_state = 4 };
static DFARule ASSERT_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };
static DFARule ASSERT_rule_5 = { .start_range = 'r', .end_range = 'r', .start_state = 5, .end_state = 6 };
static DFARule ASSERT_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };

#define TRUE_ACCEPTING 5
static DFARule TRUE_rule_1 = { .start_range = 't', .end_range = 't', .start_state = 1, .end_state = 2 };
static DFARule TRUE_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
static DFARule TRUE_rule_3 = { .start_range = 'u', .end_range = 'u', .start_state = 3, .end_state = 4 };
static DFARule TRUE_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };

#define FALSE_ACCEPTING 6
static DFARule FALSE_rule_1 = { .start_range = 'f', .end_range = 'f', .start_state = 1, .end_state = 2 };
static DFARule FALSE_rule_2 = { .start_range = 'a', .end_range = 'a', .start_state = 2, .end_state = 3 };
static DFARule FALSE_rule_3 = { .start_range = 'l', .end_range = 'l', .start_state = 3, .end_state = 4 };
static DFARule FALSE_rule_4 = { .start_range = 's', .end_range = 's', .start_state = 4, .end_state = 5 };
static DFARule FALSE_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };

#define LPAREN_ACCEPTING 2
static DFARule LPAREN_rule_1 = { .start_range = '(', .end_range = '(', .start_state = 1, .end_state = 2 };

#define RPAREN_ACCEPTING 2
static DFARule RPAREN_rule_1 = { .start_range = ')', .end_range = ')', .start_state = 1, .end_state = 2 };

#define LBRACE_ACCEPTING 2
static DFARule LBRACE_rule_1 = { .start_range = '{', .end_range = '{', .start_state = 1, .end_state = 2 };

#define RBRACE_ACCEPTING 2
static DFARule RBRACE_rule_1 = { .start_range = '}', .end_range = '}', .start_state = 1, .end_state = 2 };

#define LBRACK_ACCEPTING 2
static DFARule LBRACK_rule_1 = { .start_range = '[', .end_range = '[', .start_state = 1, .end_state = 2 };

#define RBRACK_ACCEPTING 2
static DFARule RBRACK_rule_1 = { .start_range = ']', .end_range = ']', .start_state = 1, .end_state = 2 };

#define LARROW_ACCEPTING 2
static DFARule LARROW_rule_1 = { .start_range = '<', .end_range = '<', .start_state = 1, .end_state = 2 };

#define RARROW_ACCEPTING 2
static DFARule RARROW_rule_1 = { .start_range = '>', .end_range = '>', .start_state = 1, .end_state = 2 };

#define SEMI_ACCEPTING 2
static DFARule SEMI_rule_1 = { .start_range = ';', .end_range = ';', .start_state = 1, .end_state = 2 };

#define COMMA_ACCEPTING 2
static DFARule COMMA_rule_1 = { .start_range = ',', .end_range = ',', .start_state = 1, .end_state = 2 };

#define DOT_ACCEPTING 2
static DFARule DOT_rule_1 = { .start_range = '.', .end_range = '.', .start_state = 1, .end_state = 2 };

#define STAR_ACCEPTING 2
static DFARule STAR_rule_1 = { .start_range = '*', .end_range = '*', .start_state = 1, .end_state = 2 };

#define EQUALS_ACCEPTING 2
static DFARule EQUALS_rule_1 = { .start_range = '=', .end_range = '=', .start_state = 1, .end_state = 2 };

#define LAMBDA_ARROW_ACCEPTING 3
static DFARule LAMBDA_ARROW_rule_1 = { .start_range = '=', .end_range = '=', .start_state = 1, .end_state = 2 };
static DFARule LAMBDA_ARROW_rule_2 = { .start_range = '>', .end_range = '>', .start_state = 2, .end_state = 3 };

#define BANG_ACCEPTING 2
static DFARule BANG_rule_1 = { .start_range = '!', .end_range = '!', .start_state = 1, .end_state = 2 };

#define TILDE_ACCEPTING 2
static DFARule TILDE_rule_1 = { .start_range = '~', .end_range = '~', .start_state = 1, .end_state = 2 };

#define QUESTION_ACCEPTING 2
static DFARule QUESTION_rule_1 = { .start_range = '?', .end_range = '?', .start_state = 1, .end_state = 2 };

#define COLON_ACCEPTING 2
static DFARule COLON_rule_1 = { .start_range = ':', .end_range = ':', .start_state = 1, .end_state = 2 };

#define EQUAL_ACCEPTING 3
static DFARule EQUAL_rule_1 = { .start_range = '=', .end_range = '=', .start_state = 1, .end_state = 2 };
static DFARule EQUAL_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define LE_ACCEPTING 3
static DFARule LE_rule_1 = { .start_range = '<', .end_range = '<', .start_state = 1, .end_state = 2 };
static DFARule LE_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define GE_ACCEPTING 3
static DFARule GE_rule_1 = { .start_range = '>', .end_range = '>', .start_state = 1, .end_state = 2 };
static DFARule GE_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define NOTEQUAL_ACCEPTING 3
static DFARule NOTEQUAL_rule_1 = { .start_range = '!', .end_range = '!', .start_state = 1, .end_state = 2 };
static DFARule NOTEQUAL_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define AND_ACCEPTING 3
static DFARule AND_rule_1 = { .start_range = '&', .end_range = '&', .start_state = 1, .end_state = 2 };
static DFARule AND_rule_2 = { .start_range = '&', .end_range = '&', .start_state = 2, .end_state = 3 };

#define OR_ACCEPTING 3
static DFARule OR_rule_1 = { .start_range = '|', .end_range = '|', .start_state = 1, .end_state = 2 };
static DFARule OR_rule_2 = { .start_range = '|', .end_range = '|', .start_state = 2, .end_state = 3 };

#define INC_ACCEPTING 3
static DFARule INC_rule_1 = { .start_range = '+', .end_range = '+', .start_state = 1, .end_state = 2 };
static DFARule INC_rule_2 = { .start_range = '+', .end_range = '+', .start_state = 2, .end_state = 3 };

#define DEC_ACCEPTING 3
static DFARule DEC_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
static DFARule DEC_rule_2 = { .start_range = '-', .end_range = '-', .start_state = 2, .end_state = 3 };

#define ADD_ACCEPTING 2
static DFARule ADD_rule_1 = { .start_range = '+', .end_range = '+', .start_state = 1, .end_state = 2 };

#define SUB_ACCEPTING 2
static DFARule SUB_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };

#define DIV_ACCEPTING 2
static DFARule DIV_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };

#define AMP_ACCEPTING 2
static DFARule AMP_rule_1 = { .start_range = '&', .end_range = '&', .start_state = 1, .end_state = 2 };

#define BITOR_ACCEPTING 2
static DFARule BITOR_rule_1 = { .start_range = '|', .end_range = '|', .start_state = 1, .end_state = 2 };

#define CARET_ACCEPTING 2
static DFARule CARET_rule_1 = { .start_range = '^', .end_range = '^', .start_state = 1, .end_state = 2 };

#define MOD_ACCEPTING 2
static DFARule MOD_rule_1 = { .start_range = '%', .end_range = '%', .start_state = 1, .end_state = 2 };

#define DEREF_ARROW_ACCEPTING 3
static DFARule DEREF_ARROW_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
static DFARule DEREF_ARROW_rule_2 = { .start_range = '>', .end_range = '>', .start_state = 2, .end_state = 3 };

#define ADD_ASSIGN_ACCEPTING 3
static DFARule ADD_ASSIGN_rule_1 = { .start_range = '+', .end_range = '+', .start_state = 1, .end_state = 2 };
static DFARule ADD_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define SUB_ASSIGN_ACCEPTING 3
static DFARule SUB_ASSIGN_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
static DFARule SUB_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define MUL_ASSIGN_ACCEPTING 3
static DFARule MUL_ASSIGN_rule_1 = { .start_range = '*', .end_range = '*', .start_state = 1, .end_state = 2 };
static DFARule MUL_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define DIV_ASSIGN_ACCEPTING 3
static DFARule DIV_ASSIGN_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
static DFARule DIV_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define AND_ASSIGN_ACCEPTING 3
static DFARule AND_ASSIGN_rule_1 = { .start_range = '&', .end_range = '&', .start_state = 1, .end_state = 2 };
static DFARule AND_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define OR_ASSIGN_ACCEPTING 3
static DFARule OR_ASSIGN_rule_1 = { .start_range = '|', .end_range = '|', .start_state = 1, .end_state = 2 };
static DFARule OR_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define XOR_ASSIGN_ACCEPTING 3
static DFARule XOR_ASSIGN_rule_1 = { .start_range = '^', .end_range = '^', .start_state = 1, .end_state = 2 };
static DFARule XOR_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };

#define MOD_ASSIGN_ACCEPTING 3
static DFARule MOD_ASSIGN_rule_1 = { .start_range = '%', .end_range = '%', .start_state = 1, .end_state = 2 };
static DFARule MOD_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };


/******************************/
/* Custom Tokenizer DFA Rules */
/******************************/

/* IDENT */
#define IDENT_ACCEPTING 2
/* First char of idexnt, [_a-zA-Zalpha-omegaALPHA-OMEGA] */
static const DFARule IDENT_rule_1 = { .start_range = 'a', .end_range = 'z', .start_state = 1, .end_state = 2 };
static const DFARule IDENT_rule_2 = { .start_range = 'A', .end_range = 'Z', .start_state = 1, .end_state = 2 };
static const DFARule IDENT_rule_3 = { .start_range = '_', .end_range = '_', .start_state = 1, .end_state = 2 };
static const DFARule IDENT_rule_4 = { .start_range = 0xceb1, .end_range = 0xcf89, .start_state = 1, .end_state = 2 };
static const DFARule IDENT_rule_5 = { .start_range = 0xcea9, .end_range = 0xce91, .start_state = 1, .end_state = 2 };
/* Remaining chars of ident [_a-zA-Zalpha-omegaALPHA-OMEGA0-9] */
static const DFARule IDENT_rule_6 = { .start_range = 'a', .end_range = 'z', .start_state = 2, .end_state = 2 };
static const DFARule IDENT_rule_7 = { .start_range = 'A', .end_range = 'Z', .start_state = 2, .end_state = 2 };
static const DFARule IDENT_rule_8 = { .start_range = '_', .end_range = '_', .start_state = 2, .end_state = 2 };
static const DFARule IDENT_rule_9 = { .start_range = 0xceb1, .end_range = 0xcf89, .start_state = 2, .end_state = 2 };
static const DFARule IDENT_rule_10 = { .start_range = 0xcea9, .end_range = 0xce91, .start_state = 2, .end_state = 2 };
static const DFARule IDENT_rule_11 = { .start_range = '0', .end_range = '9', .start_state = 2, .end_state = 2 };

/* Whitespace (Any amount) */
#define WS_ACCEPTING 1
static const DFARule WS_rule_1 = { .start_range = ' ',   .end_range = ' ',   .start_state = 1, .end_state = 1 };
static const DFARule WS_rule_2 = { .start_range = '\t', .end_range = '\t', .start_state = 1, .end_state = 1 };
static const DFARule WS_rule_3 = { .start_range = '\r', .end_range = '\r', .start_state = 1, .end_state = 1 };
static const DFARule WS_rule_4 = { .start_range = '\n', .end_range = '\n', .start_state = 1, .end_state = 1 };

/* Multi-Line Comment */
#define ML_COMMENT_ACCEPTING 5
static const DFARule ML_COMMENT_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
static const DFARule ML_COMMENT_rule_2 = { .start_range = '*', .end_range = '*', .start_state = 2, .end_state = 3 };
static const DFARule ML_COMMENT_rule_3 = { .start_range = '*', .end_range = '*', .start_state = 3, .end_state = 4 };
static const DFARule ML_COMMENT_rule_4 = { .start_range = '/', .end_range = '/', .start_state = 4, .end_state = 5 };
// Capture all but */ while inside comment
static const DFARule ML_COMMENT_rule_5 = { .start_range = 0, .end_range = NFASTATE_MAX, .start_state = 3, .end_state = 3 };

/* Single-Line Comment */
#define SL_COMMENT_ACCEPTING 4
static const DFARule SL_COMMENT_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
static const DFARule SL_COMMENT_rule_2 = { .start_range = '/', .end_range = '/', .start_state = 2, .end_state = 3 };
static const DFARule SL_COMMENT_rule_3 = { .start_range = '\n', .end_range = '\n', .start_state = 3, .end_state = 4 };
// Capture all but \n while inside comment
static const DFARule SL_COMMENT_rule_4 = { .start_range = 0, .end_range = NFASTATE_MAX, .start_state = 3, .end_state = 3 };

/* Import / Include */
#define IMPORT_ACCEPTING 8
static const DFARule IMPORT_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
static const DFARule IMPORT_rule_2 = { .start_range = 'm', .end_range = 'i', .start_state = 2, .end_state = 3 };
static const DFARule IMPORT_rule_3 = { .start_range = 'p', .end_range = 'i', .start_state = 3, .end_state = 4 };
static const DFARule IMPORT_rule_4 = { .start_range = 'o', .end_range = 'i', .start_state = 4, .end_state = 5 };
static const DFARule IMPORT_rule_5 = { .start_range = 'r', .end_range = 'i', .start_state = 5, .end_state = 6 };
static const DFARule IMPORT_rule_6 = { .start_range = 't', .end_range = 'i', .start_state = 6, .end_state = 8 };
static const DFARule IMPORT_rule_7 = { .start_range = 'n', .end_range = 'i', .start_state = 2, .end_state = 3 };
static const DFARule IMPORT_rule_8 = { .start_range = 'c', .end_range = 'i', .start_state = 3, .end_state = 4 };
static const DFARule IMPORT_rule_9 = { .start_range = 'l', .end_range = 'i', .start_state = 4, .end_state = 5 };
static const DFARule IMPORT_rule_10 = { .start_range = 'u', .end_range = 'i', .start_state = 5, .end_state = 6 };
static const DFARule IMPORT_rule_11 = { .start_range = 'd', .end_range = 'i', .start_state = 6, .end_state = 7 };
static const DFARule IMPORT_rule_12 = { .start_range = 'e', .end_range = 'i', .start_state = 7, .end_state = 8 };




/*************/
/* DFA Space */
/*************/
static DFARule NATIVE_rules[6];
static DFA NATIVE_DFA;
static DFARule CTYPE_rules[5];
static DFA CTYPE_DFA;
static DFARule IF_rules[2];
static DFA IF_DFA;
static DFARule ELSE_rules[4];
static DFA ELSE_DFA;
static DFARule FOR_rules[3];
static DFA FOR_DFA;
static DFARule LOOP_rules[4];
static DFA LOOP_DFA;
static DFARule WHILE_rules[5];
static DFA WHILE_DFA;
static DFARule CONTINUE_rules[8];
static DFA CONTINUE_DFA;
static DFARule BREAK_rules[5];
static DFA BREAK_DFA;
static DFARule IN_rules[2];
static DFA IN_DFA;
static DFARule CLASS_rules[5];
static DFA CLASS_DFA;
static DFARule SELF_rules[4];
static DFA SELF_DFA;
static DFARule OP_rules[2];
static DFA OP_DFA;
static DFARule OPERATOR_rules[8];
static DFA OPERATOR_DFA;
static DFARule TRAIT_rules[5];
static DFA TRAIT_DFA;
static DFARule IMPL_rules[4];
static DFA IMPL_DFA;
static DFARule ENUM_rules[4];
static DFA ENUM_DFA;
static DFARule PRIVATE_rules[7];
static DFA PRIVATE_DFA;
static DFARule PROTECTED_rules[9];
static DFA PROTECTED_DFA;
static DFARule PUBLIC_rules[6];
static DFA PUBLIC_DFA;
static DFARule INSTANCEOF_rules[10];
static DFA INSTANCEOF_DFA;
static DFARule SIZEOF_rules[6];
static DFA SIZEOF_DFA;
static DFARule ASSERT_rules[6];
static DFA ASSERT_DFA;
static DFARule TRUE_rules[4];
static DFA TRUE_DFA;
static DFARule FALSE_rules[5];
static DFA FALSE_DFA;
static DFARule LPAREN_rules[1];
static DFA LPAREN_DFA;
static DFARule RPAREN_rules[1];
static DFA RPAREN_DFA;
static DFARule LBRACE_rules[1];
static DFA LBRACE_DFA;
static DFARule RBRACE_rules[1];
static DFA RBRACE_DFA;
static DFARule LBRACK_rules[1];
static DFA LBRACK_DFA;
static DFARule RBRACK_rules[1];
static DFA RBRACK_DFA;
static DFARule LARROW_rules[1];
static DFA LARROW_DFA;
static DFARule RARROW_rules[1];
static DFA RARROW_DFA;
static DFARule SEMI_rules[1];
static DFA SEMI_DFA;
static DFARule COMMA_rules[1];
static DFA COMMA_DFA;
static DFARule DOT_rules[1];
static DFA DOT_DFA;
static DFARule STAR_rules[1];
static DFA STAR_DFA;
static DFARule EQUALS_rules[1];
static DFA EQUALS_DFA;
static DFARule LAMBDA_ARROW_rules[2];
static DFA LAMBDA_ARROW_DFA;
static DFARule BANG_rules[1];
static DFA BANG_DFA;
static DFARule TILDE_rules[1];
static DFA TILDE_DFA;
static DFARule QUESTION_rules[1];
static DFA QUESTION_DFA;
static DFARule COLON_rules[1];
static DFA COLON_DFA;
static DFARule EQUAL_rules[2];
static DFA EQUAL_DFA;
static DFARule LE_rules[2];
static DFA LE_DFA;
static DFARule GE_rules[2];
static DFA GE_DFA;
static DFARule NOTEQUAL_rules[2];
static DFA NOTEQUAL_DFA;
static DFARule AND_rules[2];
static DFA AND_DFA;
static DFARule OR_rules[2];
static DFA OR_DFA;
static DFARule INC_rules[2];
static DFA INC_DFA;
static DFARule DEC_rules[2];
static DFA DEC_DFA;
static DFARule ADD_rules[1];
static DFA ADD_DFA;
static DFARule SUB_rules[1];
static DFA SUB_DFA;
static DFARule DIV_rules[1];
static DFA DIV_DFA;
static DFARule AMP_rules[1];
static DFA AMP_DFA;
static DFARule BITOR_rules[1];
static DFA BITOR_DFA;
static DFARule CARET_rules[1];
static DFA CARET_DFA;
static DFARule MOD_rules[1];
static DFA MOD_DFA;
static DFARule DEREF_ARROW_rules[2];
static DFA DEREF_ARROW_DFA;
static DFARule ADD_ASSIGN_rules[2];
static DFA ADD_ASSIGN_DFA;
static DFARule SUB_ASSIGN_rules[2];
static DFA SUB_ASSIGN_DFA;
static DFARule MUL_ASSIGN_rules[2];
static DFA MUL_ASSIGN_DFA;
static DFARule DIV_ASSIGN_rules[2];
static DFA DIV_ASSIGN_DFA;
static DFARule AND_ASSIGN_rules[2];
static DFA AND_ASSIGN_DFA;
static DFARule OR_ASSIGN_rules[2];
static DFA OR_ASSIGN_DFA;
static DFARule XOR_ASSIGN_rules[2];
static DFA XOR_ASSIGN_DFA;
static DFARule MOD_ASSIGN_rules[2];
static DFA MOD_ASSIGN_DFA;
static DFARule IDENT_rules[11];
static DFA IDENT_DFA;
static DFARule WS_rules[4];
static DFA WS_DFA;
static DFARule ML_COMMENT_rules[5];
static DFA ML_COMMENT_DFA;
static DFARule SL_COMMENT_rules[4];
static DFA SL_COMMENT_DFA;
static DFARule IMPORT_rules[12];
static DFA IMPORT_DFA;
/************/
/* All DFAs */
/************/
static DFA all_DFAs[72];

/* Initializes the global variable all_DFAs. */
static inline DFA* initTokenizerDFAs() {
  /* Exact keyowrd rules */
  NATIVE_rules[0] = NATIVE_rule_1;
  NATIVE_rules[1] = NATIVE_rule_2;
  NATIVE_rules[2] = NATIVE_rule_3;
  NATIVE_rules[3] = NATIVE_rule_4;
  NATIVE_rules[4] = NATIVE_rule_5;
  NATIVE_rules[5] = NATIVE_rule_6;
  NATIVE_DFA.rules = NATIVE_rules;
  NATIVE_DFA.num_rules = ARR_SIZE(NATIVE_rules);
  NATIVE_DFA.accepting_state = NATIVE_ACCEPTING;
  CTYPE_rules[0] = CTYPE_rule_1;
  CTYPE_rules[1] = CTYPE_rule_2;
  CTYPE_rules[2] = CTYPE_rule_3;
  CTYPE_rules[3] = CTYPE_rule_4;
  CTYPE_rules[4] = CTYPE_rule_5;
  CTYPE_DFA.rules = CTYPE_rules;
  CTYPE_DFA.num_rules = ARR_SIZE(CTYPE_rules);
  CTYPE_DFA.accepting_state = CTYPE_ACCEPTING;
  IF_rules[0] = IF_rule_1;
  IF_rules[1] = IF_rule_2;
  IF_DFA.rules = IF_rules;
  IF_DFA.num_rules = ARR_SIZE(IF_rules);
  IF_DFA.accepting_state = IF_ACCEPTING;
  ELSE_rules[0] = ELSE_rule_1;
  ELSE_rules[1] = ELSE_rule_2;
  ELSE_rules[2] = ELSE_rule_3;
  ELSE_rules[3] = ELSE_rule_4;
  ELSE_DFA.rules = ELSE_rules;
  ELSE_DFA.num_rules = ARR_SIZE(ELSE_rules);
  ELSE_DFA.accepting_state = ELSE_ACCEPTING;
  FOR_rules[0] = FOR_rule_1;
  FOR_rules[1] = FOR_rule_2;
  FOR_rules[2] = FOR_rule_3;
  FOR_DFA.rules = FOR_rules;
  FOR_DFA.num_rules = ARR_SIZE(FOR_rules);
  FOR_DFA.accepting_state = FOR_ACCEPTING;
  LOOP_rules[0] = LOOP_rule_1;
  LOOP_rules[1] = LOOP_rule_2;
  LOOP_rules[2] = LOOP_rule_3;
  LOOP_rules[3] = LOOP_rule_4;
  LOOP_DFA.rules = LOOP_rules;
  LOOP_DFA.num_rules = ARR_SIZE(LOOP_rules);
  LOOP_DFA.accepting_state = LOOP_ACCEPTING;
  WHILE_rules[0] = WHILE_rule_1;
  WHILE_rules[1] = WHILE_rule_2;
  WHILE_rules[2] = WHILE_rule_3;
  WHILE_rules[3] = WHILE_rule_4;
  WHILE_rules[4] = WHILE_rule_5;
  WHILE_DFA.rules = WHILE_rules;
  WHILE_DFA.num_rules = ARR_SIZE(WHILE_rules);
  WHILE_DFA.accepting_state = WHILE_ACCEPTING;
  CONTINUE_rules[0] = CONTINUE_rule_1;
  CONTINUE_rules[1] = CONTINUE_rule_2;
  CONTINUE_rules[2] = CONTINUE_rule_3;
  CONTINUE_rules[3] = CONTINUE_rule_4;
  CONTINUE_rules[4] = CONTINUE_rule_5;
  CONTINUE_rules[5] = CONTINUE_rule_6;
  CONTINUE_rules[6] = CONTINUE_rule_7;
  CONTINUE_rules[7] = CONTINUE_rule_8;
  CONTINUE_DFA.rules = CONTINUE_rules;
  CONTINUE_DFA.num_rules = ARR_SIZE(CONTINUE_rules);
  CONTINUE_DFA.accepting_state = CONTINUE_ACCEPTING;
  BREAK_rules[0] = BREAK_rule_1;
  BREAK_rules[1] = BREAK_rule_2;
  BREAK_rules[2] = BREAK_rule_3;
  BREAK_rules[3] = BREAK_rule_4;
  BREAK_rules[4] = BREAK_rule_5;
  BREAK_DFA.rules = BREAK_rules;
  BREAK_DFA.num_rules = ARR_SIZE(BREAK_rules);
  BREAK_DFA.accepting_state = BREAK_ACCEPTING;
  IN_rules[0] = IN_rule_1;
  IN_rules[1] = IN_rule_2;
  IN_DFA.rules = IN_rules;
  IN_DFA.num_rules = ARR_SIZE(IN_rules);
  IN_DFA.accepting_state = IN_ACCEPTING;
  CLASS_rules[0] = CLASS_rule_1;
  CLASS_rules[1] = CLASS_rule_2;
  CLASS_rules[2] = CLASS_rule_3;
  CLASS_rules[3] = CLASS_rule_4;
  CLASS_rules[4] = CLASS_rule_5;
  CLASS_DFA.rules = CLASS_rules;
  CLASS_DFA.num_rules = ARR_SIZE(CLASS_rules);
  CLASS_DFA.accepting_state = CLASS_ACCEPTING;
  SELF_rules[0] = SELF_rule_1;
  SELF_rules[1] = SELF_rule_2;
  SELF_rules[2] = SELF_rule_3;
  SELF_rules[3] = SELF_rule_4;
  SELF_DFA.rules = SELF_rules;
  SELF_DFA.num_rules = ARR_SIZE(SELF_rules);
  SELF_DFA.accepting_state = SELF_ACCEPTING;
  OP_rules[0] = OP_rule_1;
  OP_rules[1] = OP_rule_2;
  OP_DFA.rules = OP_rules;
  OP_DFA.num_rules = ARR_SIZE(OP_rules);
  OP_DFA.accepting_state = OP_ACCEPTING;
  OPERATOR_rules[0] = OPERATOR_rule_1;
  OPERATOR_rules[1] = OPERATOR_rule_2;
  OPERATOR_rules[2] = OPERATOR_rule_3;
  OPERATOR_rules[3] = OPERATOR_rule_4;
  OPERATOR_rules[4] = OPERATOR_rule_5;
  OPERATOR_rules[5] = OPERATOR_rule_6;
  OPERATOR_rules[6] = OPERATOR_rule_7;
  OPERATOR_rules[7] = OPERATOR_rule_8;
  OPERATOR_DFA.rules = OPERATOR_rules;
  OPERATOR_DFA.num_rules = ARR_SIZE(OPERATOR_rules);
  OPERATOR_DFA.accepting_state = OPERATOR_ACCEPTING;
  TRAIT_rules[0] = TRAIT_rule_1;
  TRAIT_rules[1] = TRAIT_rule_2;
  TRAIT_rules[2] = TRAIT_rule_3;
  TRAIT_rules[3] = TRAIT_rule_4;
  TRAIT_rules[4] = TRAIT_rule_5;
  TRAIT_DFA.rules = TRAIT_rules;
  TRAIT_DFA.num_rules = ARR_SIZE(TRAIT_rules);
  TRAIT_DFA.accepting_state = TRAIT_ACCEPTING;
  IMPL_rules[0] = IMPL_rule_1;
  IMPL_rules[1] = IMPL_rule_2;
  IMPL_rules[2] = IMPL_rule_3;
  IMPL_rules[3] = IMPL_rule_4;
  IMPL_DFA.rules = IMPL_rules;
  IMPL_DFA.num_rules = ARR_SIZE(IMPL_rules);
  IMPL_DFA.accepting_state = IMPL_ACCEPTING;
  ENUM_rules[0] = ENUM_rule_1;
  ENUM_rules[1] = ENUM_rule_2;
  ENUM_rules[2] = ENUM_rule_3;
  ENUM_rules[3] = ENUM_rule_4;
  ENUM_DFA.rules = ENUM_rules;
  ENUM_DFA.num_rules = ARR_SIZE(ENUM_rules);
  ENUM_DFA.accepting_state = ENUM_ACCEPTING;
  PRIVATE_rules[0] = PRIVATE_rule_1;
  PRIVATE_rules[1] = PRIVATE_rule_2;
  PRIVATE_rules[2] = PRIVATE_rule_3;
  PRIVATE_rules[3] = PRIVATE_rule_4;
  PRIVATE_rules[4] = PRIVATE_rule_5;
  PRIVATE_rules[5] = PRIVATE_rule_6;
  PRIVATE_rules[6] = PRIVATE_rule_7;
  PRIVATE_DFA.rules = PRIVATE_rules;
  PRIVATE_DFA.num_rules = ARR_SIZE(PRIVATE_rules);
  PRIVATE_DFA.accepting_state = PRIVATE_ACCEPTING;
  PROTECTED_rules[0] = PROTECTED_rule_1;
  PROTECTED_rules[1] = PROTECTED_rule_2;
  PROTECTED_rules[2] = PROTECTED_rule_3;
  PROTECTED_rules[3] = PROTECTED_rule_4;
  PROTECTED_rules[4] = PROTECTED_rule_5;
  PROTECTED_rules[5] = PROTECTED_rule_6;
  PROTECTED_rules[6] = PROTECTED_rule_7;
  PROTECTED_rules[7] = PROTECTED_rule_8;
  PROTECTED_rules[8] = PROTECTED_rule_9;
  PROTECTED_DFA.rules = PROTECTED_rules;
  PROTECTED_DFA.num_rules = ARR_SIZE(PROTECTED_rules);
  PROTECTED_DFA.accepting_state = PROTECTED_ACCEPTING;
  PUBLIC_rules[0] = PUBLIC_rule_1;
  PUBLIC_rules[1] = PUBLIC_rule_2;
  PUBLIC_rules[2] = PUBLIC_rule_3;
  PUBLIC_rules[3] = PUBLIC_rule_4;
  PUBLIC_rules[4] = PUBLIC_rule_5;
  PUBLIC_rules[5] = PUBLIC_rule_6;
  PUBLIC_DFA.rules = PUBLIC_rules;
  PUBLIC_DFA.num_rules = ARR_SIZE(PUBLIC_rules);
  PUBLIC_DFA.accepting_state = PUBLIC_ACCEPTING;
  INSTANCEOF_rules[0] = INSTANCEOF_rule_1;
  INSTANCEOF_rules[1] = INSTANCEOF_rule_2;
  INSTANCEOF_rules[2] = INSTANCEOF_rule_3;
  INSTANCEOF_rules[3] = INSTANCEOF_rule_4;
  INSTANCEOF_rules[4] = INSTANCEOF_rule_5;
  INSTANCEOF_rules[5] = INSTANCEOF_rule_6;
  INSTANCEOF_rules[6] = INSTANCEOF_rule_7;
  INSTANCEOF_rules[7] = INSTANCEOF_rule_8;
  INSTANCEOF_rules[8] = INSTANCEOF_rule_9;
  INSTANCEOF_rules[9] = INSTANCEOF_rule_10;
  INSTANCEOF_DFA.rules = INSTANCEOF_rules;
  INSTANCEOF_DFA.num_rules = ARR_SIZE(INSTANCEOF_rules);
  INSTANCEOF_DFA.accepting_state = INSTANCEOF_ACCEPTING;
  SIZEOF_rules[0] = SIZEOF_rule_1;
  SIZEOF_rules[1] = SIZEOF_rule_2;
  SIZEOF_rules[2] = SIZEOF_rule_3;
  SIZEOF_rules[3] = SIZEOF_rule_4;
  SIZEOF_rules[4] = SIZEOF_rule_5;
  SIZEOF_rules[5] = SIZEOF_rule_6;
  SIZEOF_DFA.rules = SIZEOF_rules;
  SIZEOF_DFA.num_rules = ARR_SIZE(SIZEOF_rules);
  SIZEOF_DFA.accepting_state = SIZEOF_ACCEPTING;
  ASSERT_rules[0] = ASSERT_rule_1;
  ASSERT_rules[1] = ASSERT_rule_2;
  ASSERT_rules[2] = ASSERT_rule_3;
  ASSERT_rules[3] = ASSERT_rule_4;
  ASSERT_rules[4] = ASSERT_rule_5;
  ASSERT_rules[5] = ASSERT_rule_6;
  ASSERT_DFA.rules = ASSERT_rules;
  ASSERT_DFA.num_rules = ARR_SIZE(ASSERT_rules);
  ASSERT_DFA.accepting_state = ASSERT_ACCEPTING;
  TRUE_rules[0] = TRUE_rule_1;
  TRUE_rules[1] = TRUE_rule_2;
  TRUE_rules[2] = TRUE_rule_3;
  TRUE_rules[3] = TRUE_rule_4;
  TRUE_DFA.rules = TRUE_rules;
  TRUE_DFA.num_rules = ARR_SIZE(TRUE_rules);
  TRUE_DFA.accepting_state = TRUE_ACCEPTING;
  FALSE_rules[0] = FALSE_rule_1;
  FALSE_rules[1] = FALSE_rule_2;
  FALSE_rules[2] = FALSE_rule_3;
  FALSE_rules[3] = FALSE_rule_4;
  FALSE_rules[4] = FALSE_rule_5;
  FALSE_DFA.rules = FALSE_rules;
  FALSE_DFA.num_rules = ARR_SIZE(FALSE_rules);
  FALSE_DFA.accepting_state = FALSE_ACCEPTING;
  LPAREN_rules[0] = LPAREN_rule_1;
  LPAREN_DFA.rules = LPAREN_rules;
  LPAREN_DFA.num_rules = ARR_SIZE(LPAREN_rules);
  LPAREN_DFA.accepting_state = LPAREN_ACCEPTING;
  RPAREN_rules[0] = RPAREN_rule_1;
  RPAREN_DFA.rules = RPAREN_rules;
  RPAREN_DFA.num_rules = ARR_SIZE(RPAREN_rules);
  RPAREN_DFA.accepting_state = RPAREN_ACCEPTING;
  LBRACE_rules[0] = LBRACE_rule_1;
  LBRACE_DFA.rules = LBRACE_rules;
  LBRACE_DFA.num_rules = ARR_SIZE(LBRACE_rules);
  LBRACE_DFA.accepting_state = LBRACE_ACCEPTING;
  RBRACE_rules[0] = RBRACE_rule_1;
  RBRACE_DFA.rules = RBRACE_rules;
  RBRACE_DFA.num_rules = ARR_SIZE(RBRACE_rules);
  RBRACE_DFA.accepting_state = RBRACE_ACCEPTING;
  LBRACK_rules[0] = LBRACK_rule_1;
  LBRACK_DFA.rules = LBRACK_rules;
  LBRACK_DFA.num_rules = ARR_SIZE(LBRACK_rules);
  LBRACK_DFA.accepting_state = LBRACK_ACCEPTING;
  RBRACK_rules[0] = RBRACK_rule_1;
  RBRACK_DFA.rules = RBRACK_rules;
  RBRACK_DFA.num_rules = ARR_SIZE(RBRACK_rules);
  RBRACK_DFA.accepting_state = RBRACK_ACCEPTING;
  LARROW_rules[0] = LARROW_rule_1;
  LARROW_DFA.rules = LARROW_rules;
  LARROW_DFA.num_rules = ARR_SIZE(LARROW_rules);
  LARROW_DFA.accepting_state = LARROW_ACCEPTING;
  RARROW_rules[0] = RARROW_rule_1;
  RARROW_DFA.rules = RARROW_rules;
  RARROW_DFA.num_rules = ARR_SIZE(RARROW_rules);
  RARROW_DFA.accepting_state = RARROW_ACCEPTING;
  SEMI_rules[0] = SEMI_rule_1;
  SEMI_DFA.rules = SEMI_rules;
  SEMI_DFA.num_rules = ARR_SIZE(SEMI_rules);
  SEMI_DFA.accepting_state = SEMI_ACCEPTING;
  COMMA_rules[0] = COMMA_rule_1;
  COMMA_DFA.rules = COMMA_rules;
  COMMA_DFA.num_rules = ARR_SIZE(COMMA_rules);
  COMMA_DFA.accepting_state = COMMA_ACCEPTING;
  DOT_rules[0] = DOT_rule_1;
  DOT_DFA.rules = DOT_rules;
  DOT_DFA.num_rules = ARR_SIZE(DOT_rules);
  DOT_DFA.accepting_state = DOT_ACCEPTING;
  STAR_rules[0] = STAR_rule_1;
  STAR_DFA.rules = STAR_rules;
  STAR_DFA.num_rules = ARR_SIZE(STAR_rules);
  STAR_DFA.accepting_state = STAR_ACCEPTING;
  EQUALS_rules[0] = EQUALS_rule_1;
  EQUALS_DFA.rules = EQUALS_rules;
  EQUALS_DFA.num_rules = ARR_SIZE(EQUALS_rules);
  EQUALS_DFA.accepting_state = EQUALS_ACCEPTING;
  LAMBDA_ARROW_rules[0] = LAMBDA_ARROW_rule_1;
  LAMBDA_ARROW_rules[1] = LAMBDA_ARROW_rule_2;
  LAMBDA_ARROW_DFA.rules = LAMBDA_ARROW_rules;
  LAMBDA_ARROW_DFA.num_rules = ARR_SIZE(LAMBDA_ARROW_rules);
  LAMBDA_ARROW_DFA.accepting_state = LAMBDA_ARROW_ACCEPTING;
  BANG_rules[0] = BANG_rule_1;
  BANG_DFA.rules = BANG_rules;
  BANG_DFA.num_rules = ARR_SIZE(BANG_rules);
  BANG_DFA.accepting_state = BANG_ACCEPTING;
  TILDE_rules[0] = TILDE_rule_1;
  TILDE_DFA.rules = TILDE_rules;
  TILDE_DFA.num_rules = ARR_SIZE(TILDE_rules);
  TILDE_DFA.accepting_state = TILDE_ACCEPTING;
  QUESTION_rules[0] = QUESTION_rule_1;
  QUESTION_DFA.rules = QUESTION_rules;
  QUESTION_DFA.num_rules = ARR_SIZE(QUESTION_rules);
  QUESTION_DFA.accepting_state = QUESTION_ACCEPTING;
  COLON_rules[0] = COLON_rule_1;
  COLON_DFA.rules = COLON_rules;
  COLON_DFA.num_rules = ARR_SIZE(COLON_rules);
  COLON_DFA.accepting_state = COLON_ACCEPTING;
  EQUAL_rules[0] = EQUAL_rule_1;
  EQUAL_rules[1] = EQUAL_rule_2;
  EQUAL_DFA.rules = EQUAL_rules;
  EQUAL_DFA.num_rules = ARR_SIZE(EQUAL_rules);
  EQUAL_DFA.accepting_state = EQUAL_ACCEPTING;
  LE_rules[0] = LE_rule_1;
  LE_rules[1] = LE_rule_2;
  LE_DFA.rules = LE_rules;
  LE_DFA.num_rules = ARR_SIZE(LE_rules);
  LE_DFA.accepting_state = LE_ACCEPTING;
  GE_rules[0] = GE_rule_1;
  GE_rules[1] = GE_rule_2;
  GE_DFA.rules = GE_rules;
  GE_DFA.num_rules = ARR_SIZE(GE_rules);
  GE_DFA.accepting_state = GE_ACCEPTING;
  NOTEQUAL_rules[0] = NOTEQUAL_rule_1;
  NOTEQUAL_rules[1] = NOTEQUAL_rule_2;
  NOTEQUAL_DFA.rules = NOTEQUAL_rules;
  NOTEQUAL_DFA.num_rules = ARR_SIZE(NOTEQUAL_rules);
  NOTEQUAL_DFA.accepting_state = NOTEQUAL_ACCEPTING;
  AND_rules[0] = AND_rule_1;
  AND_rules[1] = AND_rule_2;
  AND_DFA.rules = AND_rules;
  AND_DFA.num_rules = ARR_SIZE(AND_rules);
  AND_DFA.accepting_state = AND_ACCEPTING;
  OR_rules[0] = OR_rule_1;
  OR_rules[1] = OR_rule_2;
  OR_DFA.rules = OR_rules;
  OR_DFA.num_rules = ARR_SIZE(OR_rules);
  OR_DFA.accepting_state = OR_ACCEPTING;
  INC_rules[0] = INC_rule_1;
  INC_rules[1] = INC_rule_2;
  INC_DFA.rules = INC_rules;
  INC_DFA.num_rules = ARR_SIZE(INC_rules);
  INC_DFA.accepting_state = INC_ACCEPTING;
  DEC_rules[0] = DEC_rule_1;
  DEC_rules[1] = DEC_rule_2;
  DEC_DFA.rules = DEC_rules;
  DEC_DFA.num_rules = ARR_SIZE(DEC_rules);
  DEC_DFA.accepting_state = DEC_ACCEPTING;
  ADD_rules[0] = ADD_rule_1;
  ADD_DFA.rules = ADD_rules;
  ADD_DFA.num_rules = ARR_SIZE(ADD_rules);
  ADD_DFA.accepting_state = ADD_ACCEPTING;
  SUB_rules[0] = SUB_rule_1;
  SUB_DFA.rules = SUB_rules;
  SUB_DFA.num_rules = ARR_SIZE(SUB_rules);
  SUB_DFA.accepting_state = SUB_ACCEPTING;
  DIV_rules[0] = DIV_rule_1;
  DIV_DFA.rules = DIV_rules;
  DIV_DFA.num_rules = ARR_SIZE(DIV_rules);
  DIV_DFA.accepting_state = DIV_ACCEPTING;
  AMP_rules[0] = AMP_rule_1;
  AMP_DFA.rules = AMP_rules;
  AMP_DFA.num_rules = ARR_SIZE(AMP_rules);
  AMP_DFA.accepting_state = AMP_ACCEPTING;
  BITOR_rules[0] = BITOR_rule_1;
  BITOR_DFA.rules = BITOR_rules;
  BITOR_DFA.num_rules = ARR_SIZE(BITOR_rules);
  BITOR_DFA.accepting_state = BITOR_ACCEPTING;
  CARET_rules[0] = CARET_rule_1;
  CARET_DFA.rules = CARET_rules;
  CARET_DFA.num_rules = ARR_SIZE(CARET_rules);
  CARET_DFA.accepting_state = CARET_ACCEPTING;
  MOD_rules[0] = MOD_rule_1;
  MOD_DFA.rules = MOD_rules;
  MOD_DFA.num_rules = ARR_SIZE(MOD_rules);
  MOD_DFA.accepting_state = MOD_ACCEPTING;
  DEREF_ARROW_rules[0] = DEREF_ARROW_rule_1;
  DEREF_ARROW_rules[1] = DEREF_ARROW_rule_2;
  DEREF_ARROW_DFA.rules = DEREF_ARROW_rules;
  DEREF_ARROW_DFA.num_rules = ARR_SIZE(DEREF_ARROW_rules);
  DEREF_ARROW_DFA.accepting_state = DEREF_ARROW_ACCEPTING;
  ADD_ASSIGN_rules[0] = ADD_ASSIGN_rule_1;
  ADD_ASSIGN_rules[1] = ADD_ASSIGN_rule_2;
  ADD_ASSIGN_DFA.rules = ADD_ASSIGN_rules;
  ADD_ASSIGN_DFA.num_rules = ARR_SIZE(ADD_ASSIGN_rules);
  ADD_ASSIGN_DFA.accepting_state = ADD_ASSIGN_ACCEPTING;
  SUB_ASSIGN_rules[0] = SUB_ASSIGN_rule_1;
  SUB_ASSIGN_rules[1] = SUB_ASSIGN_rule_2;
  SUB_ASSIGN_DFA.rules = SUB_ASSIGN_rules;
  SUB_ASSIGN_DFA.num_rules = ARR_SIZE(SUB_ASSIGN_rules);
  SUB_ASSIGN_DFA.accepting_state = SUB_ASSIGN_ACCEPTING;
  MUL_ASSIGN_rules[0] = MUL_ASSIGN_rule_1;
  MUL_ASSIGN_rules[1] = MUL_ASSIGN_rule_2;
  MUL_ASSIGN_DFA.rules = MUL_ASSIGN_rules;
  MUL_ASSIGN_DFA.num_rules = ARR_SIZE(MUL_ASSIGN_rules);
  MUL_ASSIGN_DFA.accepting_state = MUL_ASSIGN_ACCEPTING;
  DIV_ASSIGN_rules[0] = DIV_ASSIGN_rule_1;
  DIV_ASSIGN_rules[1] = DIV_ASSIGN_rule_2;
  DIV_ASSIGN_DFA.rules = DIV_ASSIGN_rules;
  DIV_ASSIGN_DFA.num_rules = ARR_SIZE(DIV_ASSIGN_rules);
  DIV_ASSIGN_DFA.accepting_state = DIV_ASSIGN_ACCEPTING;
  AND_ASSIGN_rules[0] = AND_ASSIGN_rule_1;
  AND_ASSIGN_rules[1] = AND_ASSIGN_rule_2;
  AND_ASSIGN_DFA.rules = AND_ASSIGN_rules;
  AND_ASSIGN_DFA.num_rules = ARR_SIZE(AND_ASSIGN_rules);
  AND_ASSIGN_DFA.accepting_state = AND_ASSIGN_ACCEPTING;
  OR_ASSIGN_rules[0] = OR_ASSIGN_rule_1;
  OR_ASSIGN_rules[1] = OR_ASSIGN_rule_2;
  OR_ASSIGN_DFA.rules = OR_ASSIGN_rules;
  OR_ASSIGN_DFA.num_rules = ARR_SIZE(OR_ASSIGN_rules);
  OR_ASSIGN_DFA.accepting_state = OR_ASSIGN_ACCEPTING;
  XOR_ASSIGN_rules[0] = XOR_ASSIGN_rule_1;
  XOR_ASSIGN_rules[1] = XOR_ASSIGN_rule_2;
  XOR_ASSIGN_DFA.rules = XOR_ASSIGN_rules;
  XOR_ASSIGN_DFA.num_rules = ARR_SIZE(XOR_ASSIGN_rules);
  XOR_ASSIGN_DFA.accepting_state = XOR_ASSIGN_ACCEPTING;
  MOD_ASSIGN_rules[0] = MOD_ASSIGN_rule_1;
  MOD_ASSIGN_rules[1] = MOD_ASSIGN_rule_2;
  MOD_ASSIGN_DFA.rules = MOD_ASSIGN_rules;
  MOD_ASSIGN_DFA.num_rules = ARR_SIZE(MOD_ASSIGN_rules);
  MOD_ASSIGN_DFA.accepting_state = MOD_ASSIGN_ACCEPTING;
  /* IDENT */
  IDENT_rules[0] = IDENT_rule_1;
  IDENT_rules[1] = IDENT_rule_2;
  IDENT_rules[2] = IDENT_rule_3;
  IDENT_rules[3] = IDENT_rule_4;
  IDENT_rules[4] = IDENT_rule_5;
  IDENT_rules[5] = IDENT_rule_6;
  IDENT_rules[6] = IDENT_rule_7;
  IDENT_rules[7] = IDENT_rule_8;
  IDENT_rules[8] = IDENT_rule_9;
  IDENT_rules[9] = IDENT_rule_10;
  IDENT_rules[10] = IDENT_rule_11;
  IDENT_DFA.rules = IDENT_rules;
  IDENT_DFA.num_rules = ARR_SIZE(IDENT_rules);
  IDENT_DFA.accepting_state = IDENT_ACCEPTING;

  /* WS */
  WS_rules[0] = WS_rule_1;
  WS_rules[1] = WS_rule_2;
  WS_rules[2] = WS_rule_3;
  WS_rules[3] = WS_rule_4;
  WS_DFA.rules = WS_rules;
  WS_DFA.num_rules = ARR_SIZE(WS_rules);
  WS_DFA.accepting_state = WS_ACCEPTING;

  /* ML_COMMENT */
  ML_COMMENT_rules[0] = ML_COMMENT_rule_1;
  ML_COMMENT_rules[1] = ML_COMMENT_rule_2;
  ML_COMMENT_rules[2] = ML_COMMENT_rule_3;
  ML_COMMENT_rules[3] = ML_COMMENT_rule_4;
  ML_COMMENT_rules[4] = ML_COMMENT_rule_5;
  ML_COMMENT_DFA.rules = ML_COMMENT_rules;
  ML_COMMENT_DFA.num_rules = ARR_SIZE(ML_COMMENT_rules);
  ML_COMMENT_DFA.accepting_state = ML_COMMENT_ACCEPTING;

  /* SL_COMMENT */
  SL_COMMENT_rules[0] = SL_COMMENT_rule_1;
  SL_COMMENT_rules[1] = SL_COMMENT_rule_2;
  SL_COMMENT_rules[2] = SL_COMMENT_rule_3;
  SL_COMMENT_rules[3] = SL_COMMENT_rule_4;
  SL_COMMENT_DFA.rules = SL_COMMENT_rules;
  SL_COMMENT_DFA.num_rules = ARR_SIZE(SL_COMMENT_rules);
  SL_COMMENT_DFA.accepting_state = SL_COMMENT_ACCEPTING;

  /* IMPORT */
  IMPORT_rules[0] = IMPORT_rule_1;
  IMPORT_rules[1] = IMPORT_rule_2;
  IMPORT_rules[2] = IMPORT_rule_3;
  IMPORT_rules[3] = IMPORT_rule_4;
  IMPORT_rules[4] = IMPORT_rule_5;
  IMPORT_rules[5] = IMPORT_rule_6;
  IMPORT_rules[6] = IMPORT_rule_7;
  IMPORT_rules[7] = IMPORT_rule_8;
  IMPORT_rules[8] = IMPORT_rule_9;
  IMPORT_rules[9] = IMPORT_rule_10;
  IMPORT_rules[10] = IMPORT_rule_11;
  IMPORT_rules[11] = IMPORT_rule_12;
  IMPORT_DFA.rules = IMPORT_rules;
  IMPORT_DFA.num_rules = ARR_SIZE(IMPORT_rules);
  IMPORT_DFA.accepting_state = IMPORT_ACCEPTING;

  /*******************************************************************/
  /* Initialize DFA Array (The point of this entire painful episode) */
  /*******************************************************************/
  all_DFAs[0] = NATIVE_DFA;
  all_DFAs[1] = CTYPE_DFA;
  all_DFAs[2] = IF_DFA;
  all_DFAs[3] = ELSE_DFA;
  all_DFAs[4] = FOR_DFA;
  all_DFAs[5] = LOOP_DFA;
  all_DFAs[6] = WHILE_DFA;
  all_DFAs[7] = CONTINUE_DFA;
  all_DFAs[8] = BREAK_DFA;
  all_DFAs[9] = IN_DFA;
  all_DFAs[10] = CLASS_DFA;
  all_DFAs[11] = SELF_DFA;
  all_DFAs[12] = OP_DFA;
  all_DFAs[13] = OPERATOR_DFA;
  all_DFAs[14] = TRAIT_DFA;
  all_DFAs[15] = IMPL_DFA;
  all_DFAs[16] = ENUM_DFA;
  all_DFAs[17] = PRIVATE_DFA;
  all_DFAs[18] = PROTECTED_DFA;
  all_DFAs[19] = PUBLIC_DFA;
  all_DFAs[20] = INSTANCEOF_DFA;
  all_DFAs[21] = SIZEOF_DFA;
  all_DFAs[22] = ASSERT_DFA;
  all_DFAs[23] = TRUE_DFA;
  all_DFAs[24] = FALSE_DFA;
  all_DFAs[25] = LPAREN_DFA;
  all_DFAs[26] = RPAREN_DFA;
  all_DFAs[27] = LBRACE_DFA;
  all_DFAs[28] = RBRACE_DFA;
  all_DFAs[29] = LBRACK_DFA;
  all_DFAs[30] = RBRACK_DFA;
  all_DFAs[31] = LARROW_DFA;
  all_DFAs[32] = RARROW_DFA;
  all_DFAs[33] = SEMI_DFA;
  all_DFAs[34] = COMMA_DFA;
  all_DFAs[35] = DOT_DFA;
  all_DFAs[36] = STAR_DFA;
  all_DFAs[37] = EQUALS_DFA;
  all_DFAs[38] = LAMBDA_ARROW_DFA;
  all_DFAs[39] = BANG_DFA;
  all_DFAs[40] = TILDE_DFA;
  all_DFAs[41] = QUESTION_DFA;
  all_DFAs[42] = COLON_DFA;
  all_DFAs[43] = EQUAL_DFA;
  all_DFAs[44] = LE_DFA;
  all_DFAs[45] = GE_DFA;
  all_DFAs[46] = NOTEQUAL_DFA;
  all_DFAs[47] = AND_DFA;
  all_DFAs[48] = OR_DFA;
  all_DFAs[49] = INC_DFA;
  all_DFAs[50] = DEC_DFA;
  all_DFAs[51] = ADD_DFA;
  all_DFAs[52] = SUB_DFA;
  all_DFAs[53] = DIV_DFA;
  all_DFAs[54] = AMP_DFA;
  all_DFAs[55] = BITOR_DFA;
  all_DFAs[56] = CARET_DFA;
  all_DFAs[57] = MOD_DFA;
  all_DFAs[58] = DEREF_ARROW_DFA;
  all_DFAs[59] = ADD_ASSIGN_DFA;
  all_DFAs[60] = SUB_ASSIGN_DFA;
  all_DFAs[61] = MUL_ASSIGN_DFA;
  all_DFAs[62] = DIV_ASSIGN_DFA;
  all_DFAs[63] = AND_ASSIGN_DFA;
  all_DFAs[64] = OR_ASSIGN_DFA;
  all_DFAs[65] = XOR_ASSIGN_DFA;
  all_DFAs[66] = MOD_ASSIGN_DFA;
  all_DFAs[67] = WS_DFA;
  all_DFAs[68] = IMPORT_DFA;
  all_DFAs[69] = SL_COMMENT_DFA;
  all_DFAs[70] = ML_COMMENT_DFA;
  all_DFAs[71] = IDENT_DFA;
  return all_DFAs;
}
#endif // INCLUDE_AUTOMATA
